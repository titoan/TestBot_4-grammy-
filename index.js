const { Bot, Keyboard, InlineKeyboard } = require("grammy");
const { Menu, MenuRange } = require("@grammyjs/menu");
require('dotenv').config();
let tableInfo = require('./mod');

const token = process.env.BOT_TOKEN;
const bot = new Bot(token);

let numberToolsCell = tableInfo.numberToolsCell;
const allTools = tableInfo.allTools;
let toolsCount = numberToolsCell;


const mainMenu = new Keyboard()
  .text("C—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤").row()
  .text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ üòà").row()
  .resized();

const countKeyboard = new InlineKeyboard()
  .text("+", "countUp").text("-", "countDown").row()
  .text("–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É", "getWriteToolsNumber").row()
  .text("–û–±–Ω—É–ª–∏—Ç—å", "dropCount")

const dropCountMenu = new InlineKeyboard()
.text("–î–∞, –±–æ–ª–µ–µ —á–µ–º", "dropCountYeas").row()
.text("–ù—É, —á–µ—Ç –∫–∞–∫-—Ç–æ –Ω–µ –æ—á–µ–Ω—å", "dropCountNope")

bot.command("start", async (ctx) => { 
  await ctx.reply("–ó–¥–æ—Ä–æ–≤, —á—É–≤–∞–∫, –≤—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é:", { reply_markup: mainMenu});
});

bot.hears("C—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", ctx =>{
  ctx.reply(`–ì–æ—Ç–æ–≤–æ –≤—Å–µ–≥–æ: ${toolsCount}`, {reply_markup: countKeyboard})
})

bot.hears("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ üòà", async ctx=>{  
  ctx.reply(`<b>–ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ</b>: ${allTools}
  -------------------------------------
  <b>–°–¥–µ–ª–∞–Ω–æ</b>: ${toolsCount}
  -------------------------------------
  <b>–û—Å—Ç–∞–ª–æ—Å—å</b>: ${tableInfo.restTools()}`,{ parse_mode: "HTML" })
})

bot.on('callback_query:data', async ctx=>{
  const chatID = ctx.update.callback_query.message.chat.id;
  const msgID = ctx.update.callback_query.message.message_id;
  let data = ctx.callbackQuery.data;
  let stickerToken = "CAACAgIAAxkBAAIK9GMINLdux4Ak-FvCdMgWzfhD120KAAJ2AANBqK4GssoUFC9GDaspBA";

  if(data === "countUp"){
    toolsCount++;
    bot.api.deleteMessage(chatID, msgID);
    await ctx.reply(`–ì–æ—Ç–æ–≤–æ –≤—Å–µ–≥–æ: ${toolsCount}`, {reply_markup: countKeyboard});
  }else if(data === "countDown"){
    toolsCount--;
    bot.api.deleteMessage(chatID, msgID);
    await ctx.reply(`–ì–æ—Ç–æ–≤–æ –≤—Å–µ–≥–æ: ${toolsCount}`, {reply_markup: countKeyboard});
  }else if(data === "getWriteToolsNumber"){
    bot.api.deleteMessage(chatID, msgID);
    tableInfo.getWriteToTable(toolsCount);
    await bot.api.sendSticker(chatID, stickerToken)
    await ctx.reply(`–ì–æ—Ç–æ–≤–æ –≤—Å–µ–≥–æ: ${toolsCount}`, {reply_markup: countKeyboard});    
  }else if(data ==="dropCount"){
    ctx.reply("–ß—É–≤–∞–∫, —Ç—ã —É–≤–µ—Ä–µ–Ω?",{reply_markup: dropCountMenu})
  }else if(data ==="dropCountYeas"){
    bot.api.deleteMessage(chatID, msgID);
    tableInfo.dropCount();
    toolsCount = tableInfo.numberToolsCell;
    ctx.reply("–ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–æ");
    ctx.reply(`–ì–æ—Ç–æ–≤–æ –≤—Å–µ–≥–æ: ${toolsCount}`, {reply_markup: countKeyboard})
  }else if(data ==="dropCountNope"){
    bot.api.deleteMessage(chatID, msgID);
  }
})

bot.start();